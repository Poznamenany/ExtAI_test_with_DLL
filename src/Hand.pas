unit Hand;
interface
uses
  Windows, System.SysUtils,
  Consts, HandAI_Ext, ExtAIUtils, ExtAI_SharedTypes;

type
  // Game class for Hand. It hides the ExtAI inside of it
  THand = class
  private
    fHandIndex: TKMHandIndex;
    fAIExt: THandAI_Ext;
  public
    constructor Create(aHandIndex: TKMHandIndex); reintroduce;
    destructor Destroy; override;

    property AIExt: THandAI_Ext read fAIExt;
    property HandIndex: TKMHandIndex read fHandIndex;

    // KP sets AI type after init
    procedure SetAIType;

    procedure UpdateState(aTick: Cardinal);
  end;

implementation
uses
  Log;


{ THand }
constructor THand.Create(aHandIndex: TKMHandIndex);
begin
  inherited Create;

  fHandIndex := aHandIndex;

  fAIExt := nil;

  gLog.Log('  THand-Create: HandIndex = ' + IntToStr(fHandIndex));
end;


destructor THand.Destroy();
begin
  FreeAndNil(fAIExt);
  gLog.Log('  THand-Destroy: HandIndex = ' + IntToStr(fHandIndex));

  inherited;
end;


procedure THand.SetAIType;
begin
  fAIExt := THandAI_Ext.Create(fHandIndex);
end;


procedure THand.UpdateState(aTick: Cardinal);
begin
  if aTick = FIRST_TICK then
    fAIExt.OnMissionStart;

  fAIExt.OnTick(aTick);

  {
  //@Martin: todo
  if aTick = 5 then
    fExtAIHand.OnTick(aTick); // Call function in ExtAI (event)
    // if ExtAI call XYZ action then XYZ procedures in THandAIExt will be called
    // if ExtAI call XYZ state then XYZ procedure in TExtAIQueueStates will be called

  if aTick = 6 then
    fExtAIHand.OnTick(aTick);
    // if ExtAI call XYZ action then XYZ procedures in THandAIExt will be called
    // if ExtAI call XYZ state then XYZ procedure in TExtAIQueueStates will be called

  if aTick = 7 then
    fExtAIHand.OnTick(aTick);
    // if ExtAI call XYZ action then XYZ procedures in THandAIExt will be called
    // if ExtAI call XYZ state then XYZ procedure in TExtAIQueueStates will be called

  if aTick = 8 then
    fExtAIHand.OnTick(aTick);
    // if ExtAI call XYZ action then XYZ procedures in THandAIExt will be called
    // if ExtAI call XYZ state then XYZ procedure in TExtAIQueueStates will be called

  if aTick = 9 then
    fExtAIHand.OnTick(aTick);
    // if ExtAI call XYZ action then XYZ procedures in THandAIExt will be called
    // if ExtAI call XYZ state then XYZ procedure in TExtAIQueueStates will be called

  if aTick = 10 then
    fExtAIHand.OnTick(aTick);
    // if ExtAI call XYZ action then XYZ procedures in THandAIExt will be called
    // if ExtAI call XYZ state then XYZ procedure in TExtAIQueueStates will be called

  //@Krom: I need everything in 1 tick to make stress test

  For better understanding:

    Events
      from Game - the game can call fExtAIHand[X].NameOfEvent(...) at any time
      to ExtAI
        SingleThread - event is called directly, the ExtAI can react immediately
        MultiThread - events are stored into TExtAIQueueEvents, the ExtAI thread
                      checks the queue every loop of TExtAIThread.Execute function
                      (and sleeps if there is nothing)

    Actions
      from ExtAI - the ExtAI can call Actions.NameOfAction(...) at any time
      to Game - entry functions are in THandAIExt
        SingleThread - actions are called immediately and directly by the ExtAI
        MultiThread - actions are called on new tick event registration in
                      TExtAIQueueEvents.OnTick => if Game creates OnTick
                      event, then all actions are called from the queue

    States
      from Game - new states are generated by command fExtAI.QueueStates.ExtractStates();
                        in the TGame.Execute (1 call = 1 class)
                        after creation of new class there is check of old classes
                        if they are not reserved by ExtAI, then they are freed
      to ExtAI - States of 1 tick are stored in separate clas in "processed" format
                 so ExtAI just send request and receive data (no delay)
        SingleThread - there is just 1 class ExtAIStates
        MultiThread - the latest class of ExtAIStates is locked so ExtAI can read
                      data (there can be MAX_HANDS + 1 classes of ExtAIStates
                      in the worst case)

  }
end;


end.
